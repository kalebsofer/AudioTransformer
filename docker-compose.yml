version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: audiotranscript-frontend:latest
    env_file:
      - .env.dev
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "8501:8501"
    healthcheck:
      test: ["CMD-SHELL", "curl -v http://localhost:8501 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: audiotranscript-backend:latest
    env_file:
      - .env.dev
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "8051:8051"
    environment:
      - USE_MINIO=True  # Set this to True if you want to use MinIO

  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=yourusername
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_DB=yourdatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yourusername -d yourdatabase"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  minio_data:
  postgres_data:
